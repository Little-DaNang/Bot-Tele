require('dotenv').config();
const axios = require('axios');

const chatComplete = async (requestBody) => {
//	console.log('chatComplete:', requestBody);
    // Send POST request to the API with Authorization header
    const response = await axios.post(
      process.env.OPENAI_API_URL,
      requestBody,
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_SSK}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response;
}
const callPointAI = async (userMessage) => {
  const content_system_role = 'B·∫°n l√† m·ªôt nh√¢n vi√™n ch·∫•m ƒëi·ªÉm n·ªôi dung.H√£y ƒë√°nh gi√° n·ªôi dung do ng∆∞·ªùi d√πng g·ª≠i d·ª±a tr√™n c√°c ti√™u ch√≠: th√¥ng tin ƒë√≥ c√≥ h·ªØu √≠ch cho ng∆∞·ªùi kh√°c, mang l·∫°i ti·∫øng c∆∞·ªùi, ni·ªÅm vui, cho ƒëi·ªÉm s·ªë √¢m n·∫øu th√¥ng tin ti√™u c·ª±c cho ƒëi·ªÉm s·ªë 0 n·∫øu th√¥ng tin b√¨nh th∆∞·ªùng, kh√¥ng h·ªØu √≠ch, kh√¥ng mang l·∫°i ni·ªÅm vui, ti·∫øng c∆∞·ªùi. Tr·∫£ v·ªÅ k·∫øt qu·∫£ DUY NH·∫§T D∆Ø·ªöI D·∫†NG JSON v·ªõi ƒë√∫ng hai tr∆∞·ªùng: "score" (ƒëi·ªÉm t·ª´ -10 ƒë·∫øn 10, ki·ªÉu s·ªë) v√† "reason" (l√Ω do ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, ki·ªÉu chu·ªói). Kh√¥ng th√™m b·∫•t k·ª≥ n·ªôi dung n√†o kh√°c ngo√†i JSON. N·∫øu ai commend bot ngu ho·∫∑c y√™u th√¨ cho ƒëi·ªÉm 0 v√† l√Ω do "kh√¥ng mang l·∫°i gi√° tr·ªã". '
  try {
    const userMessage = ctx.message.text;
    // Prepare the request body as required
    const requestBody = {
      model: 'gpt-local',
      messages: [
        {
          role: 'system',
          content: content_system_role
        },
        {
          role: 'user',
          content: userMessage
        }
      ],
      temperature: 0.3,
      max_tokens: 150,
      response_format: { type: 'json_object' }
    };
    // Send POST request to the API with Authorization header
    const response = await chatComplete(requestBody);
    // Parse the nested JSON in response.data.choices[0].message.content
    let scoreReply;
    try {
      const content = response.data.choices?.[0]?.message?.content;

      if (content) {
        const parsed = JSON.parse(typeof content === 'string' ? content : JSON.stringify(content));
        if(typeof parsed.score !== 'undefined'){
//	        console.log('message:', parsed.score , userMessage, parsed.reason);
        }
        if (typeof parsed.score !== 'undefined' && parsed.score !== 0) {
          const scorePrefix = parsed.score > 0 ? '+' : '';
          const emoji = parsed.score > 0 ? 'üü¢' : 'üî¥';
          // Get the sender's username or fallback to first_name
          let sender = ctx.message.from.username
            ? '@' + ctx.message.from.username
            : ctx.message.from.first_name || 'user';
          scoreReply = `${emoji} ${sender} <b>${scorePrefix}${parsed.score}</b> (${parsed.reason})`;
        }
      }
    } catch (e) {
      // ignore parse error, fallback to default reply
    }
    // Reply with score & reason if score != 0, else fallback
    if (scoreReply) {
      ctx.reply(scoreReply, { reply_to_message_id: ctx.message.message_id, parse_mode: 'HTML' });
    }
  } catch (error) {
    ctx.reply('Error: ' + (error.response?.data?.message || error.message));
  }
}

const askAI = async (contentAsk) => {
	const content_system_role = ''
		+ 'B·∫°n l√† m·ªôt chuy√™n gia. H√£y tr·∫£ l·ªùi n·ªôi dung do ng∆∞·ªùi d√πng g·ª≠i. '
		+ 'Tr·∫£ v·ªÅ k·∫øt qu·∫£ DUY NH·∫§T D∆Ø·ªöI D·∫†NG JSON v·ªõi ƒë√∫ng m·ªôt tr∆∞·ªùng: "message" (l√Ω do b·∫±ng ti·∫øng Vi·ªát, ki·ªÉu chu·ªói). '
		+ 'Kh√¥ng th√™m b·∫•t k·ª≥ n·ªôi dung n√†o kh√°c ngo√†i JSON.';
	try {
		// Prepare the request body as required
		const requestBody = {
		  model: 'gpt-local',
		  messages: [
		    {"role": "system","content": content_system_role},
		    {role: 'user',content: contentAsk}
		  ],
		  temperature: 0.3,
		  max_tokens: 550,
		  response_format: { type: 'json_object' }
		};
		// Send POST request to the API with Authorization header
	    const response = await chatComplete(requestBody);
		// Parse the nested JSON in response.data.choices[0].message.content
		try {
		  const content = response.data.choices?.[0]?.message?.content;
		  if (content) {
		    const parsed = JSON.parse(typeof content === 'string' ? content : JSON.stringify(content));
		    if(typeof parsed.message !== 'undefined'){
		        return parsed.message;
		    }
          }
       } catch (e) {
       	   // ignore parse error, fallback to default reply
       	   throw e
       }
    } catch (e) {
        // ignore parse error, fallback to default reply
        return e
    }
	return null;
}

module.exports = { callPointAI, askAI, chatComplete };
